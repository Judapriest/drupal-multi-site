////
/// @file
/// Define all mixins.
////

/// Media query definition.
/// @param {string} $screen - The breakpoint name. Must be a key of the $breakpoints map.
/// @example
///   .foo {
///     @include respondTo('small') {
///       color: #424242;
///     }
///   }
@mixin respond-to($screen, $additional:'') {

  $media: media-map-join(map-get($breakpoints, $screen));

  @if $media {
    @if $additional != '' {
      @media screen and #{$media}, #{$additional} {
        @content;
      }
    } @else {
      @media screen and #{$media} {
        @content;
      }
    }
  }
  @else {
    @error 'No "#{$screen}" breakpoint found in $breakpoint';
  }

}

/// Display icon using the before|after pseudo element.
/// @param {string} $icon - The icon content code (eg. from icomoon).
/// @param {number} $size - The icon size [in rem|em|px|%].
/// @param {string} $pseudoElement - The pseudo element to apply the icon to [before|after].
/// @example
///    .submit-button {
///      @include icon($i-submit);
///      // OR with custom content.
///      @include icon($i-submit) {
///        // add some specific CSS properties.
///      }
///    }
@mixin icon($icon, $size: 2.2rem, $pseudoElement: before) {

  &::#{$pseudoElement} {
    @extend %icon;
    display: inline-block;
    content: '#{$icon}';
    font-size: $size;
    @content;
  }
}

/// @font-face definitions.
/// @param {string} $name   - The font-family name.
/// @param {url}    $path   - The files path (without the extension).
/// @param {string} $weight - The associated font-weight [normal | bold | bolder | lighter | 100 | 200 | 300 | 400 | 500 | 600 | 700 | 800 | 900].
/// @param {string} $style  - The associated font-style [normal | italic | oblique].
/// @param {list}   $exts   - The associated extensions.
/// @example
///    @include font-face(MyFont, "../font/my-font", bold, italic, eot woff ttf svg);
@mixin font-face($name, $path, $weight: normal, $style: normal, $exts: eot woff2 woff ttf svg) {
  $src: null;

  $extmods: (
    eot: "?#iefix",
    svg: "#" + str-replace($name, " ", "_")
  );

  $formats: (
    eot: "embedded-opentype",
    otf: "opentype",
    ttf: "truetype"
  );

  @each $ext in $exts {
    $extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext);
    $format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);
    $src: append($src, url(quote($path + "." + $extmod)) format(quote($format)), comma);
  }

  @font-face {
    font-family: quote($name);
    src: $src , $src;
    font-style: $style;
    font-weight: $weight;
  }
}


/// Define bulleted list style (square or round)
/// @param {color}   $color  - The bullet's color.
/// @param {number}  $size   - The bullet's size (width and height) [in rem|em|px|%].
/// @param {number}  $margin - The space to have on the right of the bullet [in rem|em|px|%].
/// @param {boolean} $round  - The bullet's shape (round if true, square if not).
/// @example
///    @include bulleted-list($c-primary-A, 12px, 1em, 10px, false);
@mixin bulleted-list($color: currentColor, $size: 6px, $top: .8em, $margin: .3em, $round: true) {

  & > * {
    position: relative;
    display: flex;

    &::before {
      content: '';
      position: relative;
      width: $size;
      height: $size;
      top: $top;
      transform: translateY(-50%);
      margin-right: $margin;
      background: $color;

      @if $round {
        border-radius: 50%;
      }

      @content;
    }
  }
}

/// Define numbered list style
/// @param {color}  $color  - The number's color.
/// @param {number} $margin - The space to have between the number and the text [in rem|em|px|%].
/// @param {string} $align  - The number's alignment (related to its width).
/// @param {number} $width  - The width available for the number [in rem|em|px|%].
/// @example
///    @include numbered-list($c-primary-A, 1em, center, 30px)
@mixin numbered-list($color: inherit, $margin: .3em, $align: right, $width: 1.25em) {
  counter-reset: i;

  & > * {
    display: flex;

    &::before {
      content: counter(i) '.';
      counter-increment: i;
      width: $width;
      margin-right: $margin;
      text-align: $align;
      color: $color;
      @content;
    }
  }
}
